name: 'ðŸš€ Release mod'
run-name: >
  release ${{github.repository}} #${{ github.run_number }}
  
on:
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:
  
jobs:
  determine-version:
    name: determine version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
  build:
    name: build ${{ needs.determine-version.outputs.semVer }}
    runs-on: ubuntu-latest
    needs: 
      - determine-version
    env:
      SEMVER: ${{ needs.determine-version.outputs.semVer }}
      ASSET_NAME: jcdcdev.Eco.Core-${{ needs.determine-version.outputs.semVer }}
      PROJECT_NAME: jcdcdev.Eco.Core
      PROJECT_PATH: ./src/jcdcdev.Eco.Core/jcdcdev.Eco.Core.csproj
      BUILD_OUTPUT: ./build-output
      MOD_OUTPUT: ./build-assets/Mods/jcdcdev.Eco.Core
      ARTIFACT_OUTPUT: ./build-assets
    outputs:
      assetName: ${{ env.ASSET_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x
      - name: Build project
        run: dotnet build ${{ env.PROJECT_PATH }} -o ${{ env.BUILD_OUTPUT }} --configuration Release -p:Version=${{ env.SEMVER }}
      - name: Copy Assets
        run: |
          mkdir --parents "${{ env.MOD_OUTPUT }}"
          cp "${{ env.BUILD_OUTPUT }}/${{ env.PROJECT_NAME }}.dll" "${{ env.MOD_OUTPUT }}"
      - uses: vimtor/action-zip@v1
        with:
          files: ${{ env.ARTIFACT_OUTPUT }}
          dest: ${{ env.ASSET_NAME }}.zip
      - name: Upload mod
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_NAME }}.zip
  nuget:
    name: pack & push ${{ needs.determine-version.outputs.semVer }}
    runs-on: ubuntu-latest
    needs:
      - determine-version
      - build
    env:
      SEMVER: ${{ needs.determine-version.outputs.semVer }}
      PROJECT_PATH: ./src/jcdcdev.Eco.Core/jcdcdev.Eco.Core.csproj
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x
      - name: Pack
        run: dotnet pack ${{ env.PROJECT_PATH }} -o . --configuration Release -p:Version=${{ env.SEMVER }}
      # - name: Push to NuGet
      #   run: dotnet nuget push **\*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  create-release:
    name: create release ${{ needs.determine-version.outputs.semVer }}
    needs:
      - determine-version
      - build
      - nuget
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SEMVER: ${{ needs.determine-version.outputs.semVer }}
      ASSET_NAME: ${{ needs.build.outputs.assetName }}
    steps:
      - name: Create Release
        id: create-release
        uses: jcdcdev/jcdcdev.GitHub.CreateRelease@main
        with:
          artifact-name: ${{ env.ASSET_NAME }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.SEMVER }}
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
      - uses: nickelc/upload-to-modio@v2.1.0
        with:
          token: ${{ secrets.MODIO_TOKEN }}
          game: ${{ secrets.MODIO_GAME }}
          mod: ${{ secrets.MODIO_MOD }}
          version: ${{ env.SEMVER }}
          path: ${{ env.ASSET_NAME }}.zip
          active: true
          changelog: ${{ steps.create-release.outputs.changelog }}